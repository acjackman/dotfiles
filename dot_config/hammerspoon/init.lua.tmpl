-- luacheck: globals hs
-- hammerspoon console script
require("hs.ipc")
hs.ipc.cliInstall("/usr/local")

local log = hs.logger.new("terminalHyper", "debug")
hs.logger.defaultLogLevel = "info"

-- Easy access variables:
hostname = hs.host.localizedName()
log.df("hostname=%s", hostname)

control = { "ctrl" }
option = { "option" }
meh = { "alt", "ctrl", "shift" }
hyper = { "cmd", "alt", "ctrl" }
shift_hyper = { "cmd", "alt", "ctrl", "shift" }
ctrl_cmd = { "cmd", "ctrl" }
ctrl_cmd_shift = { "cmd", "ctrl", "shift" }

--
-- hs.loadSpoon("SpoonInstall")
-- Install=spoon.SpoonInstall

-- chromeBrowser = appID('/Applications/Google Chrome.app')
-- -- edgeBrowser = appID('/Applications/Microsoft Edge.app')
-- braveBrowser = appID('/Applications/Brave Browser Dev.app')

-- DefaultBrowser = braveBrowser
-- WorkBrowser = edgeBrowser

-- -- JiraApp = appID('~/Applications/Epichrome SSBs/Jira.app')
-- -- WikiApp = appID('~/Applications/Epichrome SSBs/Wiki.app')
-- OpsGenieApp = WorkBrowser

editor = "Cursor"
terminal = "Ghostty"
browser = "{{ .default_browser }}"

-- Disable hide
hs.hotkey.bind("cmd", "H", function() end)

--
hs.console.darkMode(true)
if hs.console.darkMode() then
  hs.console.outputBackgroundColor({ white = 0 })
  hs.console.consolePrintColor({ green = 1 })
  hs.console.consoleCommandColor({ white = 1 })
  hs.console.alpha(1)
end

--
hs.loadSpoon("RecursiveBinder")

launch_app = function(name)
  return function()
    hs.application.launchOrFocus(name)
  end
end

global_binding = function(modifier, character)
  return function()
    hs.eventtap.keyStroke(modifier, character)
  end
end

app_binding = function(modifiers, character, app)
  return function()
    local app = hs.application.get(app)
    hs.eventtap.keyStroke(modifier, character, app)
  end
end

run_shell = function(cmd)
  return function()
    hs.execute(cmd, true)
  end
end

rotate_screen_clockwise = function()
  screen = hs.screen.mainScreen()
  current_rotation = screen:rotate()
  new_rotation = (current_rotation + 90) % 360
  screen:rotate(new_rotation)
  k.triggered = true
end

rotate_screen_counterclockwise = function()
  screen = hs.screen.mainScreen()
  current_rotation = screen:rotate()
  new_rotation = (current_rotation + 270) % 360
  screen:rotate(new_rotation)
  k.triggered = true
end



hs.loadSpoon("WheelOfSeasons")
local seasonalConfig = {
  -- {{if has "work" .extras}}
  {
    directory = os.getenv("HOME") .. "/.local/share/wallpapers/summer",
    start_date = "12-21"
  },
  {
    directory = os.getenv("HOME") .. "/.local/share/wallpapers/autumn",
    start_date = "03-20"
  },
  {
    directory = os.getenv("HOME") .. "/.local/share/wallpapers/winter",
    start_date = "06-21"
  },
  {
    directory = os.getenv("HOME") .. "/.local/share/wallpapers/spring",
    start_date = "09-22"
  }
  -- {{else}}
  {directory = os.getenv("HOME") .. "/.local/share/wallpapers"},
  -- {{end}}
}
spoon.WheelOfSeasons:start(seasonalConfig, 60 * 60, true)

-- A global variable for the Hyper Mode
k = hs.hotkey.modal.new({}, "F18")

-- Enter Hyper Mode when F19 (Hyper/Capslock) is pressed
pressedF19 = function()
  k.triggered = false
  k:enter()
end

-- Leave Hyper Mode when F19 (Hyper/Capslock) is pressed,
--   send ESCAPE if no other keys are pressed.
releasedF19 = function()
  k:exit()
  if not k.triggered then
    hs.eventtap.keyStroke({}, "ESCAPE")
  end
end

-- Bind the Hyper key
f19 = hs.hotkey.bind({}, "F19", pressedF19, releasedF19)

-- Old Application
old_hyper = {
  "a", -- Zoom Global Mute Shortcut
  "SPACE", -- OmniFocus Quick Capture
  "c", -- Fantastical Keyboard Shortcut
  -- 'i', -- iTerm interactive
  "z", -- Alfred Clipboard
  "k", -- Keyboard Maestro
  "b", -- Cardhop
  "h", -- Global Dash
  "RETURN", -- Drafts
  "y", -- Menuwhere
  -- Keyboard Maestro
  -- 'v', -- Paste by typing
  -- Rating Music with Alfred
  "`", -- Remove rating
  "1", -- one star
  "2", -- two stars
  "3", -- three stars
  "4", -- four stars
  "5", -- five stars
}
for i, key in ipairs(old_hyper) do
  k:bind({}, key, nil, function()
    k.triggered = true
    hs.eventtap.keyStroke({ "cmd", "alt", "shift", "ctrl" }, key)
  end)
end

-- Alternate hyper
alt_hyper = {
  "l", -- Hook Link
  -- 'm', -- Hook markdown Lonk
}
for i, key in ipairs(alt_hyper) do
  k:bind({}, key, nil, function()
    k.triggered = true
    hs.eventtap.keyStroke({ "cmd", "shift", "ctrl" }, key)
  end)
end

-- iTunes controls
function playpause()
  hs.itunes.playpause()
  k.triggered = true
end
function backtrack()
  hs.itunes.previous()
  k.triggered = true
end
function nexttrack()
  hs.itunes.next()
  k.triggered = true
end
function musicvolup()
  hs.osascript.applescript('tell application "Music" to set sound volume to ((get sound volume) + 3)')
  k.triggered = true
end
function musicvoldown()
  hs.osascript.applescript('tell application "Music" to set sound volume to ((get sound volume) - 3)')
  k.triggered = true
end
k:bind({}, "p", nil, playpause)
k:bind({}, "left", nil, backtrack)
k:bind({}, "right", nil, nexttrack)
k:bind({}, "up", nil, musicvolup)
k:bind({}, "down", nil, musicvoldown)

-- TODO: paste clipboard
-- function typeClipboard()
--   hs.eventtap.keyStrokes(hs.pasteboard.getContents())
--   k.triggered = true
-- end
-- k:bind({}, 'v', nil, typeClipboard)
-- hs.hotkey.bind("cmd", 'H', function() end)

-- Single keybinding for app launch
launch = function(appname)
  hs.application.launchOrFocus(appname)
  k.triggered = true
end

local singleapps = {
  { "s", "Slack" },
  { "d", "Drafts" },
  { "r", browser },
  { "f", "Finder" },
  { "n", "Obsidian" },
  { "=", "Soulver 3" },
  { "t", terminal },
  { "e", editor },
}
for _, app in ipairs(singleapps) do
  k:bind({}, app[1], function()
    launch(app[2])
  end)
end

-- hs.loadSpoon("Rcmd")
--   :bindHotkeys({
--     s = "Slack",
--     d = "Drafts",
--     r = browser,
--     f = "Finder",
--     t = terminal,
--     e = editor,
--     n = function()
--       os.execute('open "obsidian://daily?vault=notes"')
--     end,
--
--     h = function()
--       hs.application.frontmostApplication():hide()
--     end,
--   })
--   :start()

-- function terminalHyper()
--   local app = hs.application.frontmostApplication()
--   local appname = app:name()
--   local log = hs.logger.new('','debug')
--   log.df("name=%s", appname)

--   if (appname == "Code") then
--     hs.eventtap.keyStroke({"ctrl"}, "`")
--   else
--     launch("iTerm")
--   end
--   k.triggered = true
--   --k:exit()
-- end
-- k:bind({}, "t", nil, terminalHyper)

-- hs.loadSpoon("MuteLight")
-- spoon.MuteLight:start("Jabra Link 380", false)

-- k:bind({}, 'm', nil, function() k.triggered = true; spoon.MuteLight:togglLight() end)

-- spoon.RecursiveBinder.escapeKey ={ {}, 'escape'}  -- Press escape to abort
-- local singleKey = spoon.RecursiveBinder.singleKey
-- local keyMap = {
--   [singleKey("d", "wallpapers")] = function()
--     spoon.WheelOfSeasons:shiftWallpapers()
--   end,
--   [singleKey("o", "open+")] = {
--     [singleKey("l", "linear")] = launch_app("Linear"),
--     [singleKey("e", "emacs")] = launch_app("Emacs"),
--     [singleKey("s", "slack")] = launch_app("Slack"),
--     [singleKey("d", "drafts")] = launch_app("Drafts"),
--     [singleKey("f", "finder")] = launch_app("Finder"),
--     [singleKey("=", "calc")] = launch_app("Soulver 3"),
--     [singleKey("t", "terminal")] = launch_app(terminal),
--     [singleKey("b", "browser")] = launch_app("{{ .default_browser }}"),
--   },
--   [singleKey("s", "screen+")] = {
--     [singleKey("r", "rotate-screen")] = {
--       [singleKey("[", "left")] = rotate_screen_counterclockwise,
--       [singleKey("]", "right")] = rotate_screen_clockwise,
--       [singleKey("0", "0째")] = function()
--         screen:rotate(0)
--       end,
--       [singleKey("1", "90째")] = function()
--         screen:rotate(90)
--       end,
--       [singleKey("2", "180째")] = function()
--         screen:rotate(180)
--       end,
--       [singleKey("3", "270째")] = function()
--         screen:rotate(270)
--       end,
--     },
--     -- [singleKey('d', "wallpapers")] = shift_wallpapers,
--   },
-- }
--
-- spoon.RecursiveBinder.helperFormat = {
--   -- atScreenEdge = 2,  -- Bottom edge (default value)
--   strokeColor = { white = 0, alpha = 0 },
--   textStyle = { -- An hs.styledtext object
--     font = {
--       name = "JetBrainsMono Nerd Font",
--       size = 18,
--     },
--   },
-- }
--
-- hs.hotkey.bind(shift_hyper, "space", spoon.RecursiveBinder.recursiveBind(keyMap))

-- URL event handler for wallpaper rotation
hs.urlevent.bind("rotate-wallpapers", function(eventName, params, senderPID, fullURL)
  log.df("URL event received: %s", eventName)
  if spoon.WheelOfSeasons then
    spoon.WheelOfSeasons:shiftWallpapers()
    log.i("Wallpapers rotated via URL event")
  else
    log.w("WheelOfSeasons spoon not loaded, cannot rotate wallpapers")
  end
end)

-- Hot reload hammerspoon configuration not needed for chezmoi managed hammerspoon
-- hs.loadSpoon("ReloadConfiguration")
-- spoon.ReloadConfiguration:start()
