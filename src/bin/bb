#!/usr/bin/env python3
"""
bb --- BitBucket CLI tool

Useful for working with BitBucket and BitBucket pipelines.

Set BB_WORKSPACE and BB_REPO with [direnv](https://direnv.net).

Set BB_USER and BB_PASSWORD using bbcreds
"""
import os
import sys
import subprocess
import logging
import time
import json
from dataclasses import dataclass
from typing import Iterable, Optional

from boltons.iterutils import get_path, PathAccessError
import requests
import click


log = logging.getLogger(__name__)


class BitBucketClient:
    session: requests.Session
    repo_api: str

    def __init__(self, workspace, repo, user, password):
        self.workspace = workspace
        self.repo = repo
        self.repo_api = f"https://api.bitbucket.org/2.0/repositories/{workspace}/{repo}"
        session = requests.Session()
        session.auth = (user, password)
        self.session = session

    def _get(self, endpoint, *args, **kwargs):
        r = self.session.get(self.repo_api + endpoint, *args, **kwargs)
        r.raise_for_status()
        return r

    def _post(self, endpoint, *args, **kwargs):
        r = self.session.post(self.repo_api + endpoint, *args, **kwargs)
        r.raise_for_status()
        return r

    def get_pipeline(self, pipeline_id) -> dict:
        r = self._get(f"/pipelines/{pipeline_id}")
        return r.json()

    def recent_pipelines(
        self, page_length: int = 10, initial_page_length: Optional[int] = None
    ) -> Iterable[dict]:
        assert page_length > 0
        assert initial_page_length is None or initial_page_length > 0
        n = initial_page_length or page_length
        while True:
            data = self._get(
                "/pipelines/", params={"pagelen": page_length, "sort": "-created_on",}
            ).json()
            yield from data["values"]
            # Continue fetching pages at the regular length
            n = page_length

    def build_url(self, pipeline: dict = None, n: int = None):
        build_number = n or (pipeline and pipeline.get("build_number"))
        if build_number is None:
            raise TypeError("pipeline or n must be set")
        return (
            f"https://bitbucket.org/{self.workspace}/{self.repo}"
            f"/addon/pipelines/home#!/results/{build_number}"
        )

    def start_pipeline(self, branch_name, pipeline_name, extras):
        # Create Build
        payload = {
            "target": {
                "type": "pipeline_ref_target",
                "ref_type": "branch",
                "ref_name": branch_name,
                "selector": {"type": "custom", "pattern": pipeline_name,},
            },
            "variables": [{"key": str(k), "value": str(v),} for k, v in extras.items()],
        }
        return self._post(f"/pipelines/", json=payload).json()

    def wait(self, pipeline: dict, sleep_time=15, watchdog_max=100) -> Optional[bool]:
        """Wait on build to finish and return the result."""
        pipeline_id = pipeline["uuid"]
        state = pipeline["state"]
        log.debug(f"{state=}")

        def running(state):
            if state["name"] not in {"IN_PROGRESS", "PENDING"}:
                return False

            if "result" in state:
                return False

            try:
                stage_name = get_path(state, ("stage", "name"))
                if stage_name == "PAUSED":
                    return False
            except PathAccessError:
                pass

            return True

        watchdog_rounds = 0
        while running(state):
            # Check watchdog counter for infinite loop
            watchdog_rounds += 1
            if watchdog_rounds >= watchdog_max:
                raise Exception("Maximum waiting time exceeded")

            # Wait for set time
            log.debug(f"Sleeping for {sleep_time}s...")
            time.sleep(sleep_time)

            # Check with BitBucket for pipeline state
            pipeline = self.get_pipeline(pipeline_id)
            state = pipeline["state"]
            log.debug(f"{state=}")
        try:
            return get_path(state, ["result", "name"]) == "SUCCESSFUL"
        except PathAccessError:
            return None  # None is paused, successful till now, but there are more steps


def _start_cli(client, branch_name, pipeline_name, extras) -> dict:
    pipeline = client.start_pipeline(branch_name, pipeline_name, extras)
    build_number = pipeline["build_number"]
    build_url = client.build_url(pipeline)
    log.info(f"Build #{build_number} started. View build: {build_url}")
    return pipeline


def _wait_cli(client, pipeline):
    build_number = pipeline["build_number"]
    build_url = client.build_url(pipeline)

    build_result = client.wait(pipeline)
    log.debug(f"{build_result=}")
    if build_result is False:
        log.info(f"Build #{build_number} incomplete. View build: {build_url}")
        sys.exit(1)

    log.info(f"Build #{build_number} complete! View build: {build_url}")


@click.group(name="bb")
@click.option("--workspace", required=True, envvar="BB_WORKSPACE")
@click.option("--repo", required=True, envvar="BB_REPO")
@click.option("--user", required=True, envvar="BB_USER")
@click.option("--password", required=True, envvar="BB_PASSWORD")
@click.option(
    "--log-level",
    default="INFO",
    type=click.Choice(["WARNING", "INFO", "DEBUG"], case_sensitive=False),
)
@click.pass_context
def cli(ctx, log_level, workspace, repo, user, password):
    logging.basicConfig(
        format=(
            log_level.upper() == "DEBUG"
            and "%(asctime)s %(levelname)-8s| %(message)s"
            or "%(message)s"
        ),
        datefmt="%Y-%m-%dT%H:%M:%S%z",
        # level=log_level.upper(),
    )
    log.setLevel(log_level.upper())
    # TODO: get user and password directly from the key-chain
    log.debug(f"COnfiguring client with {workspace=} {repo=} {user=}")
    ctx.obj = BitBucketClient(workspace, repo, user, password)


def branch_callback():
    branch_cmd = subprocess.run(
        ["git", "rev-parse", "--abbrev-ref", "HEAD", "--"], capture_output=True
    )
    if branch_cmd.returncode != 0:
        raise Exception("Unable to identify git branch")
    return branch_cmd.stdout.decode("utf-8").split("\n")[0]


@cli.command(name="start")
@click.option("--branch", required=True, default=branch_callback())
@click.option("--wait/--no-wait", required=True, default=True)
@click.option("--extras-json", nargs=1)
@click.argument("pipeline", nargs=1)
@click.pass_obj
def start_command(
    client: BitBucketClient, branch: str, pipeline: str, extras_json: str, wait: bool
):
    log.debug("running start")

    if extras_json:
        vars = json.loads(extras_json)
    else:
        vars = {}
    log.info(f"Attempting to run '{pipeline}' on branch '{branch}' with {vars=}")

    pipeline: dict = _start_cli(client, branch, pipeline, vars)
    _wait_cli(client, pipeline)


def get_pipeline_branch(pipeline: dict):
    target = pipeline["target"]
    if target["ref_type"] == "branch":
        return target["ref_name"]


@cli.command(name="wait")
@click.option("--branch", required=True, default=branch_callback())
@click.pass_obj
def wait_command(client: BitBucketClient, branch: str):
    log.debug(f"running wait on branch {branch}")
    for pipeline in client.recent_pipelines(initial_page_length=3):
        pipeline_branch = get_pipeline_branch(pipeline)
        build_number = pipeline["build_number"]
        log.debug(f"Checking #{build_number}: '{pipeline_branch}'")
        if get_pipeline_branch(pipeline) == branch:
            log.debug("identified")
            break
    else:
        log.critical(f"Unable to identify build for {branch=}")
        sys.exit(1)

    _wait_cli(client, pipeline)


if __name__ == "__main__":
    cli()
