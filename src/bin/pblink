#!/usr/bin/env python3
import re
import sys
from urllib.parse import urlparse, urlunparse, ParseResult
from functools import cached_property

import click


class GithubPRLink:
    def __init__(self, url, parsed=None):
        self.url = url.strip()
        parsed = parsed or urlparse(url)

        if parsed.hostname != "github.com":
            raise Exception(f"Not github.com, {parsed.hostname}")

        path = parsed.path
        match = re.match("^/([^/]+)/([^/]+)/(pull|issue)/([0-9]+)", path)
        if not match:
            raise Exception("Not a PR or issue")

        self.user = match.group(1)
        self.repo = match.group(2)
        self.num = match.group(4)

    @property
    def description(self):
        return f"{self.repo}#{self.num}"


class LinearIssueLink:
    def __init__(self, url, parsed=None):
        self.url = url.strip()
        parsed = parsed or urlparse(url)

        if parsed.hostname != "linear.app":
            raise Exception(f"Not linear.app, {parsed.hostname}")

        path = parsed.path
        match = re.match("^/([^/]+)/issue/(([A-Z0-9]+)-([0-9]+))/", path)
        if not match:
            raise Exception("Not an issue")

        self.workspace = match.group(1)
        self.ticket = match.group(2)
        self.team = match.group(3)
        self.num = match.group(4)

        self.url = urlunparse(
            parsed._replace(path=f"/{self.workspace}/issue/{self.ticket}/")
        )

    @property
    def description(self):
        return f"{self.ticket}"


class SlackLink:
    def __init__(self, url, parsed=None):
        self.url = url.strip()
        parsed = parsed or urlparse(url)

        if parsed.hostname != "slack.com":
            raise Exception(f"not slack.com, {parsed.hostname}")

        path = parsed.path
        match = re.match("^/archives/", path)
        if not match:
            raise Exception("not an archive link")

    @property
    def description(self):
        return "Slack Thread"


class SpaceliftRunLink:
    def __init__(self, url, parsed=None):
        self.url = url.strip()
        parsed = parsed or urlparse(url)

        if not parsed.hostname.endswith(".spacelift.io"):
            raise Exception(f"not spacelift.io, {parsed.hostname}")

        path = parsed.path
        match = re.match("^/stack/([^/]+)/run/([A-Z0-9]+)", path)
        if not match:
            raise Exception("not an archive link")

        self.stack = match.group(1)
        self.run = match.group(2)

    @property
    def description(self):
        return f"{self.stack} {self.run}"


def format_md(link):
    return f"[{link.description}]({link.url})"


def format_org(link):
    return f"[[{link.url}][{link.description}]]"


LINKS = [GithubPRLink, LinearIssueLink, SlackLink, SpaceliftRunLink]


@click.command()
@click.option("--md", "style", flag_value="markdown", default=True)
@click.option("--org", "style", flag_value="org")
def main(style):
    pasteboard = click.get_text_stream("stdin").read()

    try:
        result = urlparse(pasteboard)
    except Exception as e:
        click.echo(pasteboard)
        sys.exit(0)

    for link_style in LINKS:
        try:
            link = link_style(pasteboard, result)
            match style:
                case "markdown":
                    click.echo(format_md(link))
                case "org":
                    click.echo(format_org(link))

            sys.exit(0)
        except Exception as e:
            pass


if __name__ == "__main__":
    main()
