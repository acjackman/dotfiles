# -*- mode: zsh -*- vim: ft=zsh

function aws_export_sso_creds() (
    # Export CLI credentials for boto+other apps to use SSO role
    # Usage: `eval $(aws_export_sso_creds $AWS_PROFILE)`
    set -e -o pipefail
    local PROFILE="$1"

    [ -v "$PROFILE" ] && {
        # Fallback on AWS_PROFILE
        echo "# No profile provided falling back to AWS_PROFILE='$AWS_PROFILE'"
        PROFILE=$AWS_PROFILE
    }
    [[ $PROFILE =~ ^[_A-z0-9-]+$ ]] || {
        echo "Must specify an PROFILE with only [_A-z0-9-]. Got '$1'"
        exit 1
    }
    echo "# Getting credentials for profile '$PROFILE'"

    local CONFIG_SCRIPT='import configparser, json, os, sys; config = configparser.ConfigParser(); config.read(os.path.expanduser("~/.aws/config")); profile = config[f"profile {sys.argv[1]}"]; data = dict(account_id=profile["sso_account_id"], role_name=profile["sso_role_name"]); print(json.dumps(data));'
    config=$(python -c $CONFIG_SCRIPT $PROFILE) || { echo "# profile does not exist in aws config"; exit 1 }
    echo "# Found in AWS config: $config"
    local ACCOUNT_ID=$(echo $config | jq -r ".account_id")
    local ROLE_NAME=$(echo $config | jq -r ".role_name")

    # Borrow the access token from the aws cli rather than generating our own.
    local ACCESS_TOKEN=$(cat $(ls -1d ~/.aws/sso/cache/* | grep -v botocore) |  jq -r "{accessToken} | .[]")

    creds="$(aws-cli sso get-role-credentials --role-name $ROLE_NAME --account-id $ACCOUNT_ID --access-token $ACCESS_TOKEN --query roleCredentials --output json)"
    echo $creds | jq -r '"export AWS_ACCESS_KEY_ID=" + .accessKeyId'
    echo $creds | jq -r '"export AWS_SECRET_ACCESS_KEY=" + .secretAccessKey'
    echo $creds | jq -r '"export AWS_SESSION_TOKEN=" + .sessionToken'
)
# Usage
# export AWS_PROFILE=fulcrum-dev  # Or any profile from ~/.aws/config
# awssso $AWS_PROFILE  # logs into the AWS CLI with the specified profile
# eval "$(aws_export_sso_creds $AWS_PROFILE)"

